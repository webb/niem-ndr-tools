#!/usr/bin/env bash

#HELP:COMMAND_NAME: run NDR Schematron rules against an XML document, producing a report
#HELP:Usage: COMMAND_NAME option* $file-to-test.xml

root_dir=$(dirname "$0")/..
. "$root_dir/share/wrtools-core/opt_help.bash"
. "$root_dir/share/wrtools-core/opt_verbose.bash"
. "$root_dir/share/wrtools-core/fail.bash"
. "$root_dir/share/wrtools-core/temp.bash"

share_dir="$root_dir"/share/niem-ndr-tools

default_ndr_id_map="$root_dir"/share/niem-ndr-artifacts/niem-ndr-3-latest/ndr-id-map.xml

#HELP:Options:
#HELP:  --help | -h: print this help
#HELP:  --verbose | -v: print debugging and status output
#HELP:  --keep-temps | -k: Don't delete temporary files

got_rules=false

#HELP:  --xsl=$rules.xsl | -x $rules.xsl: use XSLT file $file.xsl as Schematron rules
unset xsl
opt_xsl () {
    [[ $got_rules = false ]] || fail "Only one of options --xsl, --rules, or --auto-rules may be used"
    [[ -s "$1" ]] || fail "arg to --xsl must exist: $1"
    xsl="$1"
    got_rules=true
    default_ndr_id_map=$(realpath "$(dirname "$1")/ndr-id-map.xml")
}

#HELP:  --rules=$code | -r $code: use NIEM NDR rule set for conformance target $code
#HELP:      codes: ref, ext, ins, set
unset RULES
opt_rules () {
    [[ $got_rules = false ]] || fail "Only one of options --xsl, --rules, or --auto-rules may be used"
    case "$1" in 
        ext | ins | ref | set ) RULES="$1";;
        * ) fail "Unknown conformance target code: $1. Expecting ext, ins, ref, or set.";;
    esac
    got_rules=true
}

#HELP:  --auto-rules | -a: set rules by autodetecting conformance targets
opt_auto_rules () {
    [[ $got_rules = false ]] || fail "Only one of options --xsl, --rules, or --auto-rules may be used"
    RULES=auto
    got_rules=true
}

#HELP:  --id-map=$id-map.xml: use $id-map.xml to describe rules
unset id_map
opt_id_map () {
    (( $# = 1 )) || fail_assert "1 argument is required"
    [[ -r $1 && -f $1 && -s $1 ]] || fail "argument to --id-map must be a readable file (got $1)"
    id_map=$(realpath "$1")
}

#HELP:  --xml-catalog=$xml-catalog | -c $xml-catalog: Use XML catalog for cross-references
unset XML_CATALOG
opt_xml_catalog () {
    (( $# == 1 )) || fail "function $FUNCNAME requires 1 arg: an XML catalog file"
    [[ -f $1 && -r $1 ]] || fail "argument to option --xml-catalog is not a readable file"
    XML_CATALOG=$1
}

#HELP:  --brief | -b: Yield brief report, for diffs
BRIEF=false
opt_brief () {
    (( $# == 0 )) || fail "function $FUNCNAME requires 0 args (got $#)"
    BRIEF=true
}

#HELP:  --grep | -g: Yield output like grep
unset grep
opt_grep () {
    (( $# == 0 )) || fail "function $FUNCNAME requires 0 args (got $#)"
    grep=true
}

OPTIND=1
while getopts :abc:ghkr:vx:-: OPTION
do
    case "$OPTION" in
        a ) opt_auto_rules;;
        b ) opt_brief;;
        c ) opt_xml_catalog "$OPTARG";;
        g ) opt_grep;;
        h ) opt_help;;
        k ) opt_keep_temps;;
        r ) opt_rules "$OPTARG";;
        v ) opt_verbose;;
        x ) opt_xsl "$OPTARG";;
        - )
            case "$OPTARG" in
                auto-rules ) opt_auto_rules;;
                brief ) opt_brief;;
                grep ) opt_grep;;
                help ) opt_help;;
                keep-temps ) opt_keep_temps;;
                rules=* ) opt_rules "${OPTARG#*=}";;
                verbose ) opt_verbose;;
                xml-catalog=* ) opt_xml_catalog "${OPTARG#*=}";;
                xsl=* ) opt_xsl "${OPTARG#*=}";;
                rules | xml-catalog ) fail "Missing required argument for long option \"$OPTARG\"";;
                grep=* | help=* | verbose=* | auto-rules=* | keep-temps=* ) fail "No argument expected for long option \"${OPTARG%%=*}\"";;
                *=* ) fail "Unexpected long option (with argument) \"${OPTARG%%=*}\"";;
                * ) fail "Unexpected long option \"$OPTARG\"";;
            esac;;
        '?' ) fail "Unknown short option \"$OPTARG\"";;
        : ) fail "Short option \"$OPTARG\" missing argument";;
        * ) fail "bad state OPTARG=\"$OPTARG\"";;
    esac
done
shift $((OPTIND-1))

[[ $got_rules = true ]] || fail "One of options --xsl, --rules, or --auto-rules must be used"

if [[ is-set = ${id_map+is-set} ]]
then ndr_id_map=$id_map
else ndr_id_map=$default_ndr_id_map
fi

vecho "Using NDR ID map \"$ndr_id_map\""

[[ -f $ndr_id_map && -r $ndr_id_map ]] || fail "Can't read file NDR ID map file \"$ndr_id_map\""

(( $# == 1 )) || fail "Must have one file to validate (got $#)"
[[ -f $1 && -r $1 ]] || fail "File to validate \"$1\" must be a readable file"

temp_make_file SVRL_RESULTS

if [[ ${RULES-unset} = auto ]]
then
    unset RULES
    while read -rd $'\n'
    do  vecho found conformance target "$REPLY"
        case "$REPLY" in
            "http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ReferenceSchemaDocument" )
                RULES=ref
                ;;
            "http://reference.niem.gov/niem/specification/naming-and-design-rules/3.0/#ExtensionSchemaDocument" )
                RULES=ext
                ;;
            * )
                printf "Warning: ignoring unknown conformance target %q\n" "$REPLY" >&2
                ;;
        esac
    done < <(get-conformance-target-uris "$1")
    [[ is-set = ${RULES+is-set} ]] || fail "No conformance target identified for file \"$1\""
fi

if [[ ${RULES+is-set} ]]
then
  SCHEMA=$root_dir/share/niem-ndr-artifacts/niem-ndr-3-latest/ndr-rules-conformance-target-"$RULES".sch
  [[ -f $SCHEMA && -r $SCHEMA ]] || fail_assert "Schematron schema is not a readable file ($SCHEMA)"
  schema_xsl="$SCHEMA".xsl
else
    [[ ${xsl+is-set} = is-set ]] || fail_assert \$xsl should be set, but wasn\'t
    schema_xsl="$xsl"
fi
    
[[ -f $schema_xsl && -r $schema_xsl ]] || fail "Schematron schema XSLT is not a readable file ($schema_xsl)"
vecho "Validating against Schematron schema XSLT \"$schema_xsl\""

# stage 1: run Schematron on $1; generate svrl with line numbers

temp_make_file svrl_with_line_numbers
COMMAND=(schematron-execute --format=svrl --xslt-file="$schema_xsl" --output-file="$svrl_with_line_numbers")
if [[ ${XML_CATALOG:+is-set} ]]
then COMMAND+=(--param=+xml-catalog="$XML_CATALOG")
fi
COMMAND+=("$1")
vrun "${COMMAND[@]}"

# stage 2: add descriptive IDs on SVRL

temp_make_file svrl_with_descriptive_ids
vrun xsltproc --stringparam ndr-id-map "$ndr_id_map" --output "$svrl_with_descriptive_ids" \
     "$share_dir"/svrl-add-descriptive-ids.xsl "$svrl_with_line_numbers"

# stage 3: generate text report

temp_make_file unsorted_text_report
vrun xsltproc --output "$unsorted_text_report" \
     "$share_dir"/annotated-svrl-to-text.xsl "$svrl_with_descriptive_ids"

# sort and trim text report

vrun sort --field-separator=: --key=1n --key=3f --key=2f "$unsorted_text_report" \
  | {
    if [[ $BRIEF = true ]]
    then cut -d : -f 1,2,3
    else cat
    fi
} | {
    if [[ -n ${grep+is-set} ]]
    then while read -r -d $'\n' line
         do printf '%s:%s\n' "$1" "$line"
         done
    else cat
    fi
}

# output spills to stdout

